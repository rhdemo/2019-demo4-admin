apiVersion: v1
kind: Template

metadata:
  name: nodejs-server

labels:
  application: nodejs-server

parameters:
  - name: APPLICATION_NAME
    value: 'nodejs-server'
    required: true
  - name: SOURCE_REPOSITORY_URL
    description: The source URL for the application
    displayName: Source URL
    value: https://github.com/cfchase/react-web-ex
    required: true
  - name: SOURCE_REPOSITORY_REF
    description: The branch name for the application
    displayName: Source Branch
    value: master
    required: true
  - name: SOURCE_REPOSITORY_DIR
    description: The location within the source repo of the application
    displayName: Source Directory
    value: /nodejs-server
    required: true


objects:
  - apiVersion: v1
    kind: ImageStream
    metadata:
      name: ${APPLICATION_NAME}
      labels:
        app: ${APPLICATION_NAME}
    spec:
      dockerImageRepository: ${APPLICATION_NAME}
      tags:
      - name: latest

  - apiVersion: v1
    kind: BuildConfig
    metadata:
      labels:
        app: ${APPLICATION_NAME}
      name: ${APPLICATION_NAME}
    spec:
      output:
        to:
          kind: ImageStreamTag
          name: ${APPLICATION_NAME}:latest
      source:
        git:
          uri: ${SOURCE_REPOSITORY_URL}
          ref: ${SOURCE_REPOSITORY_REF}
        contextDir: ${SOURCE_REPOSITORY_DIR}
        type: Git
      strategy:
        sourceStrategy:
          env:
            - name: GIT_SSL_NO_VERIFY
              value: 'true'
          forcePull: true
          from:
            kind: DockerImage
            name: docker.io/centos/nodejs-8-centos7
        type: Source
      triggers:
        - imageChange:
          type: ImageChange
        - type: ConfigChange

  - apiVersion: v1
    kind: DeploymentConfig
    metadata:
      name: ${APPLICATION_NAME}
      labels:
        app: ${APPLICATION_NAME}
    spec:
      replicas: 1
      selector:
        deploymentconfig: ${APPLICATION_NAME}
      strategy:
        type: Rolling
      template:
        metadata:
          labels:
            app: ${APPLICATION_NAME}
            deploymentconfig: ${APPLICATION_NAME}
        spec:
          containers:
            - image: ${APPLICATION_NAME}
              imagePullPolicy: Always
              name: ${APPLICATION_NAME}
              ports:
                - containerPort: 8080
                  protocol: TCP
              resources: {}
              terminationMessagePath: /dev/termination-log
              terminationMessagePolicy: File
              readinessProbe:
                httpGet:
                  path: /status
                  port: 8080
                  scheme: HTTP
              livenessProbe:
                httpGet:
                  path: /status
                  port: 8080
                  scheme: HTTP
                initialDelaySeconds: 60
                periodSeconds: 30
          dnsPolicy: ClusterFirst
          restartPolicy: Always
          schedulerName: default-scheduler
          securityContext: {}
          terminationGracePeriodSeconds: 30
      test: false
      triggers:
        - imageChangeParams:
            automatic: true
            containerNames:
              - ${APPLICATION_NAME}
            from:
              kind: ImageStreamTag
              name: ${APPLICATION_NAME}:latest
          type: ImageChange
        - type: ConfigChange

  - apiVersion: v1
    kind: Service
    metadata:
      name: ${APPLICATION_NAME}
      labels:
        app: ${APPLICATION_NAME}
    spec:
      ports:
      - name: 8080-tcp
        port: 8080
        protocol: TCP
        targetPort: 8080
      selector:
        deploymentconfig: ${APPLICATION_NAME}

#  - apiVersion: v1
#    kind: Route
#    metadata:
#      labels:
#        app: ${APPLICATION_NAME}
#      name: ui
#    spec:
#      port:
#        targetPort: 8080-tcp
#      to:
#        kind: Service
#        name: ${APPLICATION_NAME}

